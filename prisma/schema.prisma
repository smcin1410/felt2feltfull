generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" or "admin"
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
  blogPosts     BlogPost[]
  // ... other user relations
}

model TournamentEvent {
  id            String   @id @default(cuid())
  tournamentId  String
  name          String
  startDate     DateTime
  endDate       DateTime?
  buyIn         Int?
  prizePool     Int?
  description   String?
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  location    String
  venue       String
  addressLine1 String?
  addressLine2 String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  startDate   DateTime
  endDate     DateTime?
  buyIn       Int?
  prizePool   Int?
  description String?
  link        String?
  imageKey    String?   // Key for the image in /public/stock-photos/
  events      TournamentEvent[]
}

model Destination {
  id          String   @id @default(cuid())
  casinoName  String
  city        String
  state       String?
  country     String
  addressLine1 String?
  addressLine2 String?
  region      String?
  postalCode  String?
  description String
  imageKey    String   // Key for the image in /public/stock-photos/
  tags        String?  // store as comma-separated string
  website     String?
  pokerRoomInfo Json?
  travelerInformation String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  timestamp DateTime @default(now())
  details   String?
  user      User     @relation(fields: [userId], references: [id])
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  excerpt   String?
  imageKey  String?
  tags      String? // comma-separated
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
